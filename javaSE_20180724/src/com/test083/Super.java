package com.test083;

public interface Super {

	// 추상(abstract)
	// -> 실체 간의 공통된 특성을 추출한 것. 즉, 실체는 없고 특성만 존재한다.
	// -> 추상 클래스(멤버 중 일부만 추상인 상태), 인터페이스(멤버 전체가 추상인 상태)
	
	// 인터페이스
	// -> 여러가지 객체 간의 관계에서 중간(접점) 역할을 하는 추상 객체. 약한 결합을 도와주는 객체
	// -> 예를 들어,
	/*
	자동차에서 여러개의 부품으로 구성되어 있다.
	타이어 부품은 자동차에 꼭 필요하다.
	특정 회사 제품만 사용할 수 있는 것은 아니다.
	자동차에 연결될 타이어 부품의 표준화(인터페이스)를 통해서 유연성 확보.
	타 회사 제품도 가능
	약한 결합 상태
	*/
	// -> 자기 자신은 클래스가 아니므로 객체 생성 불가
	// -> 클래스 상속 관계에서 부모 클래스는 아니지만, 부모 역할 가능 -> 다형성 지원
	
	// 추상 메소드 선언 예
	// -> public abstract 키워드 고정
	// public abstract를 생략하더라도 자동적으로 컴파일과정에서 붙는다.
	// -> 나머지 메소드 시그니처는 사용자 지정
	// public abstract 리턴타입 메소드명 (매개변수, ...);
	// 메소드 내 액션코드는 없다 {} 중괄호는 표시하지 않는다. -> 액션코드가 없다.
	public abstract void method();
	
	//추상화 장점
	/*
	1. 실체 클래스들의 공통된 필드와 메소드의 이름 통일할 목적
	2. 실체 클래스 작성시 시간 절약 -> 메소드 설계 지원
	3. 약한 결합 상태. 다형성 지원
	*/
}
